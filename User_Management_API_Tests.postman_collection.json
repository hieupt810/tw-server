{
  "info": {
    "name": "User Management API Tests",
    "description": "Test collection for user management API endpoints",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{jwt_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:5000",
      "type": "string"
    },
    {
      "key": "jwt_token",
      "value": "YOUR_JWT_TOKEN_HERE",
      "type": "string"
    },
    {
      "key": "test_user_id",
      "value": "USER_ID_FROM_RESPONSE",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Login User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "login"]
            },
            "description": "Login to get JWT token for testing"
          },
          "response": []
        }
      ]
    },
    {
      "name": "User Management",
      "item": [
        {
          "name": "Get All Users",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/users/",
              "host": ["{{base_url}}"],
              "path": ["api", "users", ""]
            },
            "description": "Get paginated list of all users"
          },
          "response": []
        },
        {
          "name": "Get Users with Pagination",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/users/?page=1&size=5&order_by=full_name&order_direction=asc",
              "host": ["{{base_url}}"],
              "path": ["api", "users", ""],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "size",
                  "value": "5"
                },
                {
                  "key": "order_by",
                  "value": "full_name"
                },
                {
                  "key": "order_direction",
                  "value": "asc"
                }
              ]
            },
            "description": "Get users with pagination and sorting"
          },
          "response": []
        },
        {
          "name": "Search Users by Name",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/users/?name=john&page=1&size=10",
              "host": ["{{base_url}}"],
              "path": ["api", "users", ""],
              "query": [
                {
                  "key": "name",
                  "value": "john"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ]
            },
            "description": "Search users by name (full name or email)"
          },
          "response": []
        },
        {
          "name": "Get User Detail",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/users/{{test_user_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "{{test_user_id}}"]
            },
            "description": "Get detailed information about a specific user"
          },
          "response": []
        },
        {
          "name": "Update User",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"full_name\": \"Updated User Name\",\n  \"birthday\": \"1990-05-15\",\n  \"phone_number\": \"+84 123 456 789\",\n  \"avatar\": \"https://example.com/avatar.jpg\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/users/{{test_user_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "{{test_user_id}}"]
            },
            "description": "Update user information (admin or self)"
          },
          "response": []
        },
        {
          "name": "Delete User",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/users/{{test_user_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "{{test_user_id}}"]
            },
            "description": "Delete a user (admin or self)"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Current User",
      "item": [
        {
          "name": "Get Current User",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/users/me",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "me"]
            },
            "description": "Get current authenticated user's information"
          },
          "response": []
        },
        {
          "name": "Update Current User",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"full_name\": \"My Updated Name\",\n  \"birthday\": \"1985-12-25\",\n  \"phone_number\": \"+84 987 654 321\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/users/me",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "me"]
            },
            "description": "Update current user's profile"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Validation Tests",
      "item": [
        {
          "name": "Invalid Pagination Parameters",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/users/?page=0&size=101",
              "host": ["{{base_url}}"],
              "path": ["api", "users", ""],
              "query": [
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "101"
                }
              ]
            },
            "description": "Test invalid pagination parameters (should return 400)"
          },
          "response": []
        },
        {
          "name": "Invalid Phone Number",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"phone_number\": \"invalid-phone-number\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/users/me",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "me"]
            },
            "description": "Test invalid phone number format (should return 400)"
          },
          "response": []
        },
        {
          "name": "Future Birthday",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"birthday\": \"2030-01-01\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/users/me",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "me"]
            },
            "description": "Test future birthday (should return 400)"
          },
          "response": []
        },
        {
          "name": "Short Full Name",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"full_name\": \"A\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/users/me",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "me"]
            },
            "description": "Test too short full name (should return 400)"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Permission Tests",
      "item": [
        {
          "name": "Access Without Token",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/users/",
              "host": ["{{base_url}}"],
              "path": ["api", "users", ""]
            },
            "description": "Test access without JWT token (should return 401)"
          },
          "response": []
        },
        {
          "name": "Non-existent User",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/users/00000000-0000-0000-0000-000000000000",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "00000000-0000-0000-0000-000000000000"]
            },
            "description": "Test accessing non-existent user (should return 404)"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Edge Cases",
      "item": [
        {
          "name": "Update with Empty Body",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{base_url}}/api/users/me",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "me"]
            },
            "description": "Test update with empty body (should be successful with no changes)"
          },
          "response": []
        },
        {
          "name": "Valid Phone Number Formats",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"phone_number\": \"+84-123-456-789\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/users/me",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "me"]
            },
            "description": "Test valid phone number with different format"
          },
          "response": []
        },
        {
          "name": "Clear Phone Number",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"phone_number\": null\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/users/me",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "me"]
            },
            "description": "Test clearing phone number (set to null)"
          },
          "response": []
        },
        {
          "name": "Clear Birthday",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"birthday\": null\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/users/me",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "me"]
            },
            "description": "Test clearing birthday (set to null)"
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "// Set dynamic variables if needed",
          "console.log('Testing User Management API');"
        ],
        "type": "text/javascript"
      }
    },
    {
      "listen": "test",
      "script": {
        "exec": [
          "// Basic response tests for successful requests",
          "if (pm.response.code < 400) {",
          "    pm.test('Status code is successful', function () {",
          "        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
          "    });",
          "    ",
          "    pm.test('Response has valid JSON', function () {",
          "        pm.response.to.have.jsonBody();",
          "    });",
          "}",
          "",
          "// Test response time",
          "pm.test('Response time is acceptable', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "// For user list endpoints, test pagination structure",
          "if (pm.request.url.path.includes('users') && pm.request.method === 'GET' && !pm.request.url.path.includes('me')) {",
          "    if (pm.response.code === 200) {",
          "        pm.test('Response has pagination structure', function () {",
          "            const response = pm.response.json();",
          "            pm.expect(response).to.have.property('data');",
          "            pm.expect(response).to.have.property('paging');",
          "            pm.expect(response.paging).to.have.property('page');",
          "            pm.expect(response.paging).to.have.property('size');",
          "            pm.expect(response.paging).to.have.property('totalCount');",
          "        });",
          "    }",
          "}",
          "",
          "// For user detail endpoints, test user structure",
          "if (pm.request.url.path.includes('users') && pm.request.method === 'GET' && pm.response.code === 200) {",
          "    pm.test('User object has required fields', function () {",
          "        const response = pm.response.json();",
          "        const user = response.data ? response.data[0] : response;",
          "        if (user) {",
          "            pm.expect(user).to.have.property('id');",
          "            pm.expect(user).to.have.property('email');",
          "            pm.expect(user).to.have.property('full_name');",
          "            pm.expect(user).to.not.have.property('password');",
          "        }",
          "    });",
          "}"
        ],
        "type": "text/javascript"
      }
    }
  ]
} 